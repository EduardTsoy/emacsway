
О проблемах найма в IT-индустрии
================================

.. post:: Dec 15, 2017
   :language: ru
   :tags: HR, Hiring
   :category:
   :author: Ivan Zakrevsky


В разное время мне приходилось как наниматься на работу, так и принимать непосредственное участие в собеседовании соискателей.
Некоторые мои наблюдения имеют систематический характер, и я постараюсь их обобщить.


Страх личной конкуренции
========================

Одна из самых частых проблем - это персональный страх личной конкуренции собеседующего, в силу чего он стремится избавиться от конкурентов еще на этапе их собеседования.

    "мда... у меня тоже так в паре контор было... нарвался на единственного архитекта в конторе ну и он мне начал сыпать ересь лишь бы ему так дальше одному в конторе и остаться :) убирал конкуренцию))"
    (Solution Architect с многолетним стажем одной из крупнейшей мировой IT-компании)

Если тим-лидер не обладает достаточным уровнем храбрости, он никогда не одобрит сильного разработчика в свою команду, который сможет его сместить с лидерских позиций.


Компетентность
==============

Мне приходилось сталкиваться с откровенной некомпетентностью, например, когда собеседующий доказывал что deadlock (взаимная блокировка) может возникнуть даже при блокировке одной-единственной строки БД (на самом деле в таком случае возникает "ERROR: could not serialize access due to concurrent update").
Иногда бывает что на собеседовании задают вопросы, которые совершенно не раскрывают опыт соискателя, а скорее характеризуют уровень самой компании.
А иногда приходилось сталкиваться с настолько аморальным и лживым поведением собеседующих, что в реальность этого было трудно поверить.

Из общения с коллегами я понял, что такие случаи имеют массовый характер.


Лучшая система отбора кандидатов в моей практике
================================================

В этой системе решение о переходе собеседника на новый раунд принимал весь технический коллектив.

Сперва колективно изучали резюме человека и изучали его Open Source библиотеки.

Если у человека открытого кода не было, то давали ему тестовое задание.
Причем, тестовое задание было очень интересным, оно хорошо раскрывало навыки доменного проектирования кандидата.
Задание было часов на 8-22, смотря какие технологии использовались.
Высшим пилотажем было сделать задание без использования веб-фреймворков и без ORM (используя Patterns of Enterprise Application Architecture).
Дело в том, что веб-фреймворк и ORM маскируют навыки проектирования кандидата.
Но мы не возражали против их использования.

После этого делался коллективный код-ревью.

Обычно в задании были какие-то недочеты, и мы в процессе коллективного ревью просили человека устранить проблемы.
Мы указывали на проблему, говорили о том как ее можно устранить, и смотрели, насколько человек способен ее исправить.
Не так страшна допущенная ошибка, как неспособность человека ее исправить и применить полученную информацию.
Всю информацию, необходимую для исправления ошибки, мы предоставляли в виде ссылок на соответствующие интернет-ресурсы.

После этого делали голосование, и человек переходил на новый раунд.

Далее проводили коллективной собеседование. Всей командой. Любой мог задать вопрос.

Интервью - вопрос очень тонкий.
Есть разница между тем, чтобы "завалить" кандидата, откровенно демонстрируя ему свой апломб, и тем, чтобы оценить его реальный уровень знаний, да так, чтобы при этом он не почувствовал себя полным идиотом.
Ведь он тоже не в единственной компании проходит собеседование, и у него должно сохраниться желание работать у Вас.
Разумеется, готовый специалист нам практически никогда не попадался, поэтому основной задачей собеседования было оценить насколько быстро кандидата можно обучить и сделать его полезным участником команды.

Потом опять голосование.

После этого интервью с CEO.

После этого - оффер.

Весь этот процесс был открытым для HR-менеджера и проходил под его наблюдением.

Поэтому к нам в команду попадали сильные ребята.
Невозможно было никого "топить" из страха личной конкуренции, когда на тебя смотрит вся команда.
Невозможно было сказать "нет" когда вся команда говорила "да".

Если кто-то говорил "нет", то он должен был обосновать свое "нет" каждому, кто сказал "да".

Команда понимала, что им с этим человеком придется укладываться в дедлайны.
И каждый был заинтересован в том, чтобы брать сильных ребят. 

Страх личной конкуренции уходил на второй план, тем более, что у нас в команде люди постоянно развивались и работали с литературой.
Как правило, технический уровень нашей команды был выше новых кандидатов, хотя и не без исключений.

Важно отметить, что такой подход воспитывал чувство ответственности за коллектив, и формировал высокую самомотивацию его участников.
Командный дух был очень высоким.


Полезные решения
================

Я опишу несколько полезных практик которые я наблюдал в грамотных компаниях.

В некоторых компания на всех этапах собеседования присутствует HR-менеджер лично.
Это устраняет конфликт интересов, так как HR заинтересован в принятии сильных специалистов, а технические интервьюеры иногда имеют конфликт интересов (страх личной конкуренции).

В грамотных компаниях техническое собеседующее лицо привлекается из параллельной команды, чтобы исключить его личную заинтересованность ("потопить" потенциальных конкурентов или "протолкнуть" своих друзей).

Иногда на собеседовании присутствует представитель бизнеса, т.е. лицо заинтересованное в качестве разрабатываемого продукта, что тоже оправдано.

Нередко для собеседований используется внутрикорпоративная система видеосвязи, которая фиксирует собеседование.

А в очень грамотных компаниях кандидата просят оставить фидбэк о собеседовании и ответить на десяток вопросов.

Бывают случаи, когда представители бизнеса и HR-менеджеры, присутствовавшие на интервью лично, остаются недовольными оценками заангажированных технических интервьюеров, и устраивают контрольное интервью с привлечением других технических специалистов.


Советы соискателям
==================

Что делать тому, кто оказался несправедливо недооцененным?

Не пытайтесь доказывать свою правоту. Это просто не Ваша компания. Идите дальше.
В том, что вы столкнулись с такой системой отбора, которая позволила этому случится, виноват именно тот, кому Вы хотите что-то доказать.
Вы для него никто, и если бы он был способен принять то что Вы хотите ему сообщить, то такая ситуация просто никогда не возникла бы.
Он все равно поверит не Вам, даже если Вы будуте доказывать, что белое - это белое.
Каждый человек верит в то, во что он хочет верить.

    "Легче обмануть человека, чем убедить его в том, что он обманут."

    "It's easier to fool people than to convince them that they have been fooled."
    (Марк Твен)

Иногда такая политика приводит к тому, что закзачик, на фоне ухудшения экономики разработки, увольняет всю команду целиком и потом набирает новую команду.


Советы работодателям
====================

Очень часто рекрутеры ищут готового специалиста по определенному стеку технологий.
По своему опыту знаю, что на поиск хорошего специалиста уходят месяцы.
А на поиск хорошего специалиста с нужным стэком технологий - еще больше времени.

Допустим, Вам повезло, случилось чудо, и Вы нашли готового специалиста за пару месяцев.
Пока он пройдет все формальности, поднимет рабочее окружение, и приступит к работе, пройдет до двух недель.
Пока он войдет в суть проекта и начнет самостоятельно работать, пройдет еще пара месяцев, и это при условии если Вы используете методики совместной разработки для обмены опытом (что уже редкость).

Итого, четыре с половиной месяца до начала полноценной работы.

Освоить же Angular занимает 2-4 недели. Пока человек проходит все формальности и входит в суть проекта, он вполне может освоить эту технологию при условии, что у него уже существует базовая подготовка по JavaScript.

По этой причине мы иногда нанимали разработчиков без опыта с Python но с большим опытом проектирования на PHP.
Просто освоить Python можно намного быстрее, чем освоить проектирование.
У опытного разработчика знание синтаксиса языка программирования занимает меньше 10% его знаний.
